{"ast":null,"code":"import axios from 'axios';\nimport io from 'socket.io-client';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Socket.IO connection for real-time features\nlet socket = null;\nconst initializeSocket = () => {\n  if (!socket) {\n    socket = io('http://localhost:5000');\n  }\n  return socket;\n};\nexport const apiService = {\n  // Original endpoints\n  async getPatients() {\n    const response = await api.get('/patients');\n    return response.data;\n  },\n  async getPatient(id) {\n    const response = await api.get(`/patients/${id}`);\n    return response.data;\n  },\n  async getRiskAssessment(patientData) {\n    const response = await api.post('/risk', patientData);\n    return response.data;\n  },\n  async getStudySummary(riskFactor) {\n    const response = await api.post('/study', {\n      risk_factor: riskFactor\n    });\n    return response.data;\n  },\n  async getQuestionnaire(chiefComplaint) {\n    const response = await api.post('/questionnaire', {\n      chief_complaint: chiefComplaint\n    });\n    return response.data;\n  },\n  async getInsuranceMapping(symptoms, recommendedAction) {\n    const response = await api.post('/insurance', {\n      symptoms,\n      recommended_action: recommendedAction\n    });\n    return response.data;\n  },\n  // NEW AI-POWERED ENDPOINTS\n\n  // AI Chat\n  async sendAIMessage(message, sessionId, patientContext = null) {\n    const response = await api.post('/ai/chat', {\n      message,\n      sessionId,\n      patientContext\n    });\n    return response.data;\n  },\n  async getConversationHistory(sessionId) {\n    const response = await api.get(`/ai/conversation/${sessionId}`);\n    return response.data;\n  },\n  // Google Calendar Integration\n  async scheduleAppointment(appointmentData) {\n    const response = await api.post('/calendar/schedule', appointmentData);\n    return response.data;\n  },\n  async getProviderAvailability(providerId, date) {\n    const response = await api.get(`/calendar/availability/${providerId}/${date}`);\n    return response.data;\n  },\n  // Real-time Collaboration\n  joinCollaborationSession(sessionId, callbacks = {}) {\n    const socketConnection = initializeSocket();\n    socketConnection.emit('join_session', sessionId);\n\n    // Handle real-time events\n    if (callbacks.onProviderJoined) {\n      socketConnection.on('provider_joined', callbacks.onProviderJoined);\n    }\n    if (callbacks.onProviderLeft) {\n      socketConnection.on('provider_left', callbacks.onProviderLeft);\n    }\n    if (callbacks.onNewAnnotation) {\n      socketConnection.on('new_annotation', callbacks.onNewAnnotation);\n    }\n    if (callbacks.onAIResponse) {\n      socketConnection.on('ai_response', callbacks.onAIResponse);\n    }\n    return socketConnection;\n  },\n  sendAnnotation(sessionId, annotation) {\n    if (socket) {\n      socket.emit('annotation', {\n        sessionId,\n        ...annotation\n      });\n    }\n  },\n  // Voice Recognition Helper\n  async processVoiceInput(audioBlob) {\n    // In a real implementation, this would send audio to a speech-to-text service\n    // For demo purposes, we'll simulate this\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          transcript: \"What is the patient's risk assessment?\",\n          confidence: 0.95\n        });\n      }, 1000);\n    });\n  },\n  // Advanced Analytics (Mock)\n  async getPatientRiskTrends(patientId, timeframe = '6months') {\n    // Mock trending data\n    const mockTrends = {\n      risk_scores: [{\n        date: '2023-01-01',\n        score: 3\n      }, {\n        date: '2023-03-01',\n        score: 5\n      }, {\n        date: '2023-06-01',\n        score: 8\n      }, {\n        date: '2023-09-01',\n        score: 14\n      }],\n      key_changes: ['New onset diabetes detected', 'Weight loss accelerated', 'CA 19-9 elevated significantly'],\n      predictions: {\n        next_3_months: 'high',\n        recommended_monitoring: 'monthly',\n        suggested_interventions: ['Immediate gastroenterology referral', 'CT imaging with contrast', 'Genetic counseling consultation']\n      }\n    };\n    return new Promise(resolve => {\n      setTimeout(() => resolve(mockTrends), 500);\n    });\n  },\n  // Multi-Modal Analysis (Mock)\n  async analyzePatientImage(imageFile, analysisType = 'radiology') {\n    // Mock image analysis\n    const mockAnalysis = {\n      findings: ['Pancreatic head mass measuring 2.3 cm', 'Mild pancreatic ductal dilatation', 'No evidence of vascular invasion'],\n      confidence: 0.87,\n      recommendations: ['Tissue sampling recommended', 'Multidisciplinary team consultation', 'Staging workup if malignant'],\n      urgency: 'high'\n    };\n    return new Promise(resolve => {\n      setTimeout(() => resolve(mockAnalysis), 2000);\n    });\n  },\n  // Health Routine Generation and Calendar Sync\n  async generateHealthRoutine(patientData, preferences = {}) {\n    const response = await api.post('/health-routine/generate', {\n      patientData,\n      preferences\n    });\n    return response.data;\n  },\n  async scheduleHealthRoutine(routine, patientName, startDate = new Date()) {\n    const response = await api.post('/health-routine/schedule', {\n      routine,\n      patientName,\n      startDate: startDate.toISOString()\n    });\n    return response.data;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","io","API_BASE_URL","api","create","baseURL","headers","socket","initializeSocket","apiService","getPatients","response","get","data","getPatient","id","getRiskAssessment","patientData","post","getStudySummary","riskFactor","risk_factor","getQuestionnaire","chiefComplaint","chief_complaint","getInsuranceMapping","symptoms","recommendedAction","recommended_action","sendAIMessage","message","sessionId","patientContext","getConversationHistory","scheduleAppointment","appointmentData","getProviderAvailability","providerId","date","joinCollaborationSession","callbacks","socketConnection","emit","onProviderJoined","on","onProviderLeft","onNewAnnotation","onAIResponse","sendAnnotation","annotation","processVoiceInput","audioBlob","Promise","resolve","setTimeout","transcript","confidence","getPatientRiskTrends","patientId","timeframe","mockTrends","risk_scores","score","key_changes","predictions","next_3_months","recommended_monitoring","suggested_interventions","analyzePatientImage","imageFile","analysisType","mockAnalysis","findings","recommendations","urgency","generateHealthRoutine","preferences","scheduleHealthRoutine","routine","patientName","startDate","Date","toISOString"],"sources":["D:/Summer Projects/panware/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport io from 'socket.io-client';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Socket.IO connection for real-time features\nlet socket = null;\n\nconst initializeSocket = () => {\n  if (!socket) {\n    socket = io('http://localhost:5000');\n  }\n  return socket;\n};\n\nexport const apiService = {\n  // Original endpoints\n  async getPatients() {\n    const response = await api.get('/patients');\n    return response.data;\n  },\n\n  async getPatient(id) {\n    const response = await api.get(`/patients/${id}`);\n    return response.data;\n  },\n\n  async getRiskAssessment(patientData) {\n    const response = await api.post('/risk', patientData);\n    return response.data;\n  },\n\n  async getStudySummary(riskFactor) {\n    const response = await api.post('/study', { risk_factor: riskFactor });\n    return response.data;\n  },\n\n  async getQuestionnaire(chiefComplaint) {\n    const response = await api.post('/questionnaire', { chief_complaint: chiefComplaint });\n    return response.data;\n  },\n\n  async getInsuranceMapping(symptoms, recommendedAction) {\n    const response = await api.post('/insurance', {\n      symptoms,\n      recommended_action: recommendedAction\n    });\n    return response.data;\n  },\n\n  // NEW AI-POWERED ENDPOINTS\n\n  // AI Chat\n  async sendAIMessage(message, sessionId, patientContext = null) {\n    const response = await api.post('/ai/chat', {\n      message,\n      sessionId,\n      patientContext\n    });\n    return response.data;\n  },\n\n  async getConversationHistory(sessionId) {\n    const response = await api.get(`/ai/conversation/${sessionId}`);\n    return response.data;\n  },\n\n  // Google Calendar Integration\n  async scheduleAppointment(appointmentData) {\n    const response = await api.post('/calendar/schedule', appointmentData);\n    return response.data;\n  },\n\n  async getProviderAvailability(providerId, date) {\n    const response = await api.get(`/calendar/availability/${providerId}/${date}`);\n    return response.data;\n  },\n\n  // Real-time Collaboration\n  joinCollaborationSession(sessionId, callbacks = {}) {\n    const socketConnection = initializeSocket();\n\n    socketConnection.emit('join_session', sessionId);\n\n    // Handle real-time events\n    if (callbacks.onProviderJoined) {\n      socketConnection.on('provider_joined', callbacks.onProviderJoined);\n    }\n\n    if (callbacks.onProviderLeft) {\n      socketConnection.on('provider_left', callbacks.onProviderLeft);\n    }\n\n    if (callbacks.onNewAnnotation) {\n      socketConnection.on('new_annotation', callbacks.onNewAnnotation);\n    }\n\n    if (callbacks.onAIResponse) {\n      socketConnection.on('ai_response', callbacks.onAIResponse);\n    }\n\n    return socketConnection;\n  },\n\n  sendAnnotation(sessionId, annotation) {\n    if (socket) {\n      socket.emit('annotation', {\n        sessionId,\n        ...annotation\n      });\n    }\n  },\n\n  // Voice Recognition Helper\n  async processVoiceInput(audioBlob) {\n    // In a real implementation, this would send audio to a speech-to-text service\n    // For demo purposes, we'll simulate this\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          transcript: \"What is the patient's risk assessment?\",\n          confidence: 0.95\n        });\n      }, 1000);\n    });\n  },\n\n  // Advanced Analytics (Mock)\n  async getPatientRiskTrends(patientId, timeframe = '6months') {\n    // Mock trending data\n    const mockTrends = {\n      risk_scores: [\n        { date: '2023-01-01', score: 3 },\n        { date: '2023-03-01', score: 5 },\n        { date: '2023-06-01', score: 8 },\n        { date: '2023-09-01', score: 14 }\n      ],\n      key_changes: [\n        'New onset diabetes detected',\n        'Weight loss accelerated',\n        'CA 19-9 elevated significantly'\n      ],\n      predictions: {\n        next_3_months: 'high',\n        recommended_monitoring: 'monthly',\n        suggested_interventions: [\n          'Immediate gastroenterology referral',\n          'CT imaging with contrast',\n          'Genetic counseling consultation'\n        ]\n      }\n    };\n\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(mockTrends), 500);\n    });\n  },\n\n  // Multi-Modal Analysis (Mock)\n  async analyzePatientImage(imageFile, analysisType = 'radiology') {\n    // Mock image analysis\n    const mockAnalysis = {\n      findings: [\n        'Pancreatic head mass measuring 2.3 cm',\n        'Mild pancreatic ductal dilatation',\n        'No evidence of vascular invasion'\n      ],\n      confidence: 0.87,\n      recommendations: [\n        'Tissue sampling recommended',\n        'Multidisciplinary team consultation',\n        'Staging workup if malignant'\n      ],\n      urgency: 'high'\n    };\n\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(mockAnalysis), 2000);\n    });\n  },\n\n  // Health Routine Generation and Calendar Sync\n  async generateHealthRoutine(patientData, preferences = {}) {\n    const response = await api.post('/health-routine/generate', {\n      patientData,\n      preferences\n    });\n    return response.data;\n  },\n\n  async scheduleHealthRoutine(routine, patientName, startDate = new Date()) {\n    const response = await api.post('/health-routine/schedule', {\n      routine,\n      patientName,\n      startDate: startDate.toISOString()\n    });\n    return response.data;\n  }\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}