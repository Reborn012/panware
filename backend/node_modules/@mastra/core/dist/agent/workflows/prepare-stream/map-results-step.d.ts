import type { AISpan, AISpanType } from '../../../ai-tracing/index.js';
import type { SystemMessage } from '../../../llm/index.js';
import type { ModelLoopStreamArgs } from '../../../llm/model/model.loop.types.js';
import type { MastraMemory } from '../../../memory/memory.js';
import type { MemoryConfig } from '../../../memory/types.js';
import type { RuntimeContext } from '../../../runtime-context/index.js';
import type { OutputSchema } from '../../../stream/base/schema.js';
import type { ChunkType } from '../../../stream/types.js';
import type { InnerAgentExecutionOptions } from '../../agent.types.js';
import type { SaveQueueManager } from '../../save-queue/index.js';
import type { AgentCapabilities, PrepareMemoryStepOutput, PrepareToolsStepOutput } from './schema.js';
interface MapResultsStepOptions<OUTPUT extends OutputSchema | undefined = undefined, FORMAT extends 'aisdk' | 'mastra' | undefined = undefined> {
    capabilities: AgentCapabilities;
    options: InnerAgentExecutionOptions<OUTPUT, FORMAT>;
    resourceId?: string;
    runId: string;
    runtimeContext: RuntimeContext;
    memory?: MastraMemory;
    memoryConfig?: MemoryConfig;
    saveQueueManager: SaveQueueManager;
    agentAISpan: AISpan<AISpanType.AGENT_RUN>;
    instructions: SystemMessage;
}
export declare function createMapResultsStep<OUTPUT extends OutputSchema | undefined = undefined, FORMAT extends 'aisdk' | 'mastra' | undefined = undefined>({ capabilities, options, resourceId, runId, runtimeContext, memory, memoryConfig, saveQueueManager, agentAISpan, instructions, }: MapResultsStepOptions<OUTPUT, FORMAT>): ({ inputData, bail, }: {
    inputData: {
        "prepare-tools-step": PrepareToolsStepOutput;
        "prepare-memory-step": PrepareMemoryStepOutput;
    };
    bail: <T>(value: T) => T;
}) => Promise<{
    textStream: AsyncGenerator<never, void, unknown>;
    fullStream: ReadableStream<ChunkType>;
    objectStream: ReadableStream<any>;
    text: Promise<string>;
    usage: Promise<{
        inputTokens: number;
        outputTokens: number;
        totalTokens: number;
    }>;
    finishReason: Promise<string>;
    tripwire: boolean;
    tripwireReason: string | undefined;
    response: {
        id: `${string}-${string}-${string}-${string}-${string}`;
        timestamp: Date;
        modelId: string;
        messages: never[];
    };
    toolCalls: Promise<never[]>;
    toolResults: Promise<never[]>;
    warnings: Promise<undefined>;
    request: {
        body: string;
    };
    object: undefined;
    experimental_output: undefined;
    steps: undefined;
    experimental_providerMetadata: undefined;
} | ModelLoopStreamArgs<any, OUTPUT>>;
export {};
//# sourceMappingURL=map-results-step.d.ts.map