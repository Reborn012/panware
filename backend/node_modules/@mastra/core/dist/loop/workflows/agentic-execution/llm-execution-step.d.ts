import type { ToolSet } from 'ai-v5';
import type { OutputSchema } from '../../../stream/base/schema.js';
import type { OuterLLMRun } from '../../types.js';
export declare function createLLMExecutionStep<Tools extends ToolSet = ToolSet, OUTPUT extends OutputSchema = undefined>({ models, _internal, messageId, runId, modelStreamSpan, telemetry_settings, tools, toolChoice, messageList, includeRawChunks, modelSettings, providerOptions, options, toolCallStreaming, controller, output, outputProcessors, headers, downloadRetries, downloadConcurrency, }: OuterLLMRun<Tools, OUTPUT>): import("../../..").Step<"llm-execution", import("zod").ZodObject<{
    messageId: import("zod").ZodString;
    messages: import("zod").ZodObject<{
        all: import("zod").ZodArray<import("zod").ZodAny, "many">;
        user: import("zod").ZodArray<import("zod").ZodAny, "many">;
        nonUser: import("zod").ZodArray<import("zod").ZodAny, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        user: any[];
        all: any[];
        nonUser: any[];
    }, {
        user: any[];
        all: any[];
        nonUser: any[];
    }>;
    output: import("zod").ZodObject<{
        text: import("zod").ZodOptional<import("zod").ZodString>;
        reasoning: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        reasoningText: import("zod").ZodOptional<import("zod").ZodString>;
        files: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        toolCalls: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        toolResults: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        sources: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        staticToolCalls: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        dynamicToolCalls: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        staticToolResults: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        dynamicToolResults: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        usage: import("zod").ZodObject<{
            inputTokens: import("zod").ZodNumber;
            outputTokens: import("zod").ZodNumber;
            totalTokens: import("zod").ZodNumber;
            reasoningTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
            cachedInputTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, "strip", import("zod").ZodTypeAny, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }>;
        steps: import("zod").ZodArray<import("zod").ZodAny, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    }, {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    }>;
    metadata: import("zod").ZodObject<{
        id: import("zod").ZodOptional<import("zod").ZodString>;
        model: import("zod").ZodOptional<import("zod").ZodString>;
        modelId: import("zod").ZodOptional<import("zod").ZodString>;
        timestamp: import("zod").ZodOptional<import("zod").ZodDate>;
        providerMetadata: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
        headers: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
        request: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
    }, "strip", import("zod").ZodTypeAny, {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    }, {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    }>;
    stepResult: import("zod").ZodObject<{
        reason: import("zod").ZodString;
        warnings: import("zod").ZodArray<import("zod").ZodAny, "many">;
        isContinued: import("zod").ZodBoolean;
        logprobs: import("zod").ZodOptional<import("zod").ZodAny>;
        totalUsage: import("zod").ZodOptional<import("zod").ZodObject<{
            inputTokens: import("zod").ZodNumber;
            outputTokens: import("zod").ZodNumber;
            totalTokens: import("zod").ZodNumber;
            reasoningTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
            cachedInputTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, "strip", import("zod").ZodTypeAny, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }>>;
        headers: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
        messageId: import("zod").ZodOptional<import("zod").ZodString>;
        request: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
    }, "strip", import("zod").ZodTypeAny, {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    }, {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    }>;
}, "strip", import("zod").ZodTypeAny, {
    output: {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    };
    messageId: string;
    metadata: {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    };
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    stepResult: {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    };
}, {
    output: {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    };
    messageId: string;
    metadata: {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    };
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    stepResult: {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    };
}>, import("zod").ZodObject<{
    messageId: import("zod").ZodString;
    messages: import("zod").ZodObject<{
        all: import("zod").ZodArray<import("zod").ZodAny, "many">;
        user: import("zod").ZodArray<import("zod").ZodAny, "many">;
        nonUser: import("zod").ZodArray<import("zod").ZodAny, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        user: any[];
        all: any[];
        nonUser: any[];
    }, {
        user: any[];
        all: any[];
        nonUser: any[];
    }>;
    output: import("zod").ZodObject<{
        text: import("zod").ZodOptional<import("zod").ZodString>;
        reasoning: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        reasoningText: import("zod").ZodOptional<import("zod").ZodString>;
        files: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        toolCalls: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        toolResults: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        sources: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        staticToolCalls: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        dynamicToolCalls: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        staticToolResults: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        dynamicToolResults: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodAny, "many">>;
        usage: import("zod").ZodObject<{
            inputTokens: import("zod").ZodNumber;
            outputTokens: import("zod").ZodNumber;
            totalTokens: import("zod").ZodNumber;
            reasoningTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
            cachedInputTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, "strip", import("zod").ZodTypeAny, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }>;
        steps: import("zod").ZodArray<import("zod").ZodAny, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    }, {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    }>;
    metadata: import("zod").ZodObject<{
        id: import("zod").ZodOptional<import("zod").ZodString>;
        model: import("zod").ZodOptional<import("zod").ZodString>;
        modelId: import("zod").ZodOptional<import("zod").ZodString>;
        timestamp: import("zod").ZodOptional<import("zod").ZodDate>;
        providerMetadata: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
        headers: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
        request: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
    }, "strip", import("zod").ZodTypeAny, {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    }, {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    }>;
    stepResult: import("zod").ZodObject<{
        reason: import("zod").ZodString;
        warnings: import("zod").ZodArray<import("zod").ZodAny, "many">;
        isContinued: import("zod").ZodBoolean;
        logprobs: import("zod").ZodOptional<import("zod").ZodAny>;
        totalUsage: import("zod").ZodOptional<import("zod").ZodObject<{
            inputTokens: import("zod").ZodNumber;
            outputTokens: import("zod").ZodNumber;
            totalTokens: import("zod").ZodNumber;
            reasoningTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
            cachedInputTokens: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, "strip", import("zod").ZodTypeAny, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }, {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        }>>;
        headers: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
        messageId: import("zod").ZodOptional<import("zod").ZodString>;
        request: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodAny>>;
    }, "strip", import("zod").ZodTypeAny, {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    }, {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    }>;
}, "strip", import("zod").ZodTypeAny, {
    output: {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    };
    messageId: string;
    metadata: {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    };
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    stepResult: {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    };
}, {
    output: {
        steps: any[];
        usage: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        };
        text?: string | undefined;
        reasoning?: any[] | undefined;
        files?: any[] | undefined;
        sources?: any[] | undefined;
        toolCalls?: any[] | undefined;
        toolResults?: any[] | undefined;
        reasoningText?: string | undefined;
        staticToolCalls?: any[] | undefined;
        dynamicToolCalls?: any[] | undefined;
        staticToolResults?: any[] | undefined;
        dynamicToolResults?: any[] | undefined;
    };
    messageId: string;
    metadata: {
        id?: string | undefined;
        providerMetadata?: Record<string, any> | undefined;
        model?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        timestamp?: Date | undefined;
        modelId?: string | undefined;
    };
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    stepResult: {
        reason: string;
        warnings: any[];
        isContinued: boolean;
        messageId?: string | undefined;
        headers?: Record<string, string> | undefined;
        request?: Record<string, any> | undefined;
        logprobs?: any;
        totalUsage?: {
            inputTokens: number;
            outputTokens: number;
            totalTokens: number;
            reasoningTokens?: number | undefined;
            cachedInputTokens?: number | undefined;
        } | undefined;
    };
}>, import("zod").ZodType<any, import("zod").ZodTypeDef, any>, import("zod").ZodType<any, import("zod").ZodTypeDef, any>, import("../../..").DefaultEngineType>;
//# sourceMappingURL=llm-execution-step.d.ts.map